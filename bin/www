#!/usr/bin/env node

/**
 * Module dependencies.
 */

global.env = process.env.env || "development";
const app = require('../app');
const debug = require('debug')('todo-jest-husky:server');
const http = require('http');

const sequelize = require('../models').sequelize;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

sequelize.authenticate().then(function () {
    console.log('DB Connection has been established successfully.');
    sequelize.migrate().then(function () {
        server.listen(port, function () {
            console.log(`App started on ${env} and listening port ${port}`);
        });
    }).catch(function (e) {
        console.log("Can not migrate db " + e);
    });
}).catch(function (e) {
    console.log('Unable to connect to the database:', e);
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
